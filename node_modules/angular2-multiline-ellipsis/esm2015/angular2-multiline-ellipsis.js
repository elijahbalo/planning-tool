import { Directive, ElementRef, Inject, PLATFORM_ID, HostListener, NgModule } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Removes excess text from element until it fits in elements
 * and appends a ellipsis symbol to end of text. This requires that
 * the elements height be fixed and it's `overflow` css property
 * be `hidden`
 *
 * \@example
 * ```html
 * <p appEllipsis>Lorem ipsum dolor</p>
 * ```
 *
 */
class MultilineEllipsisDirective {
    /**
     * contructor
     * @param {?} el
     * @param {?} platformId
     */
    constructor(el, platformId) {
        this.el = el;
        this.platformId = platformId;
        /**
         * Ellipsis charater
         */
        this.dotChar = 'â€¦';
    }
    /**
     * after view init
     * @return {?}
     */
    ngAfterViewInit() {
        const /** @type {?} */ isBrowser = isPlatformBrowser(this.platformId);
        const /** @type {?} */ el = this.el.nativeElement;
        if (el.getAttribute('dotdotdot')) {
            this.dotChar = el.getAttribute('dotdotdot');
        }
        this.textInit = el.innerText.split(' ');
        if (isBrowser) {
            this.ellipsisFunc();
        }
    }
    /**
     * ellipsis Function
     * @return {?}
     */
    ellipsisFunc() {
        const /** @type {?} */ el = this.el.nativeElement;
        let /** @type {?} */ text = JSON.parse(JSON.stringify(this.textInit));
        el.innerText = `${text.join(' ')}`;
        while (el.scrollHeight > el.offsetHeight) {
            text = text.slice(0, -1);
            el.innerText = `${text.join(' ')}${this.dotChar}`;
        }
    }
    /**
     * listen window resize
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        this.ellipsisFunc();
    }
}
MultilineEllipsisDirective.decorators = [
    { type: Directive, args: [{
                selector: '[appEllipsis]'
            },] },
];
/** @nocollapse */
MultilineEllipsisDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
];
MultilineEllipsisDirective.propDecorators = {
    "onResize": [{ type: HostListener, args: ['window:resize', ['$event'],] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MultilineEllipsisModule {
}
MultilineEllipsisModule.decorators = [
    { type: NgModule, args: [{
                declarations: [MultilineEllipsisDirective],
                exports: [MultilineEllipsisDirective]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { MultilineEllipsisModule, MultilineEllipsisDirective };
//# sourceMappingURL=angular2-multiline-ellipsis.js.map
