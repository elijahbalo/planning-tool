{
  "version": 3,
  "file": "angular2-multiline-ellipsis.umd.min.js",
  "sources": [
    "ng://angular2-multiline-ellipsis/out/src/app/multiline-ellipsis/multiline-ellipsis.directive.ts",
    "ng://angular2-multiline-ellipsis/out/src/app/multiline-ellipsis/multiline-ellipsis.module.ts"
  ],
  "sourcesContent": [
    "import { AfterViewInit, Directive, ElementRef, Inject, PLATFORM_ID, HostListener, Input } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n/**\n * Removes excess text from element until it fits in elements\n * and appends a ellipsis symbol to end of text. This requires that\n * the elements height be fixed and it's `overflow` css property\n * be `hidden`\n *\n * @example\n * ```html\n * <p appEllipsis>Lorem ipsum dolor</p>\n * ```\n *\n */\n\n@Directive({\n  selector: '[appEllipsis]'\n})\nexport class MultilineEllipsisDirective implements AfterViewInit {\n  /**\n   * Ellipsis charater\n   */\n  private dotChar = 'â€¦';\n  /**\n   * init text when load page\n   */\n  private textInit: any;\n  /**\n   * contructor\n   */\n  constructor(\n    private el: ElementRef,\n    @Inject(PLATFORM_ID) private platformId\n  ) { }\n  /**\n   * after view init\n   */\n  ngAfterViewInit(): void {\n    const isBrowser = isPlatformBrowser(this.platformId);\n    const el: HTMLElement = this.el.nativeElement;\n    if (el.getAttribute('dotdotdot')) {\n      this.dotChar = el.getAttribute('dotdotdot');\n    }\n    this.textInit = el.innerText.split(' ');\n    if (isBrowser) {\n      this.ellipsisFunc();\n    }\n  }\n  /**\n   * ellipsis Function\n   */\n  private ellipsisFunc(): void {\n    const el: HTMLElement = this.el.nativeElement;\n    let text = JSON.parse(JSON.stringify(this.textInit));\n    el.innerText = `${text.join(' ')}`;\n    while (el.scrollHeight > el.offsetHeight) {\n      text = text.slice(0, -1);\n      el.innerText = `${text.join(' ')}${this.dotChar}`;\n    }\n  }\n  /**\n   * listen window resize\n   */\n  @HostListener('window:resize', ['$event'])\n  onResize(event: any): void {\n    this.ellipsisFunc();\n  }\n}\n\n",
    "import { NgModule } from '@angular/core';\r\nimport { MultilineEllipsisDirective } from './multiline-ellipsis.directive';\r\n\r\n\r\n@NgModule({\r\n  declarations: [MultilineEllipsisDirective],\r\n  exports: [MultilineEllipsisDirective]\r\n})\r\nexport class MultilineEllipsisModule { }\r\n"
  ],
  "names": [
    "MultilineEllipsisDirective",
    "el",
    "platformId",
    "this",
    "dotChar",
    "prototype",
    "ngAfterViewInit",
    "isBrowser",
    "isPlatformBrowser",
    "nativeElement",
    "getAttribute",
    "textInit",
    "innerText",
    "split",
    "ellipsisFunc",
    "text",
    "JSON",
    "parse",
    "stringify",
    "join",
    "scrollHeight",
    "offsetHeight",
    "slice",
    "onResize",
    "event",
    "type",
    "Directive",
    "args",
    "selector",
    "ElementRef",
    "undefined",
    "decorators",
    "Inject",
    "PLATFORM_ID",
    "HostListener",
    "MultilineEllipsisModule",
    "NgModule",
    "declarations",
    "exports"
  ],
  "mappings": "+VAkBA,IAAAA,EAAA,WAYE,SAAFA,EACYC,EACqBC,GADrBC,KAAZF,GAAYA,EACqBE,KAAjCD,WAAiCA,EAVjCC,KAAAC,QAAoB,WAelBJ,EAAFK,UAAAC,gBAAE,WACE,IAAMC,EAAYC,EAAAA,kBAAkBL,KAAKD,YACnCD,EAAkBE,KAAKF,GAAGQ,cAC5BR,EAAGS,aAAa,eAClBP,KAAKC,QAAUH,EAAGS,aAAa,cAEjCP,KAAKQ,SAAWV,EAAGW,UAAUC,MAAM,KAC/BN,GACFJ,KAAKW,gBAMDd,EAAVK,UAAAS,aAAU,WACN,IAAMb,EAAkBE,KAAKF,GAAGQ,cAC5BM,EAAOC,KAAKC,MAAMD,KAAKE,UAAUf,KAAKQ,WAE1C,IADAV,EAAGW,UAAY,GAAGG,EAAKI,KAAK,KACrBlB,EAAGmB,aAAenB,EAAGoB,cAC1BN,EAAOA,EAAKO,MAAM,GAAI,GACtBrB,EAAGW,UAAY,GAAGG,EAAKI,KAAK,KAAOhB,KAAKC,SAO5CJ,EAAFK,UAAAkB,SAAE,SAASC,GACPrB,KAAKW,kBA/CT,iBAHA,CAAAW,KAACC,EAAAA,UAADC,KAAA,CAAW,CACTC,SAAU,uDAhBZ,CAAAH,KAAmCI,EAAAA,YAgCnC,CAAAJ,KAAAK,UAAAC,WAAA,CAAA,CAAAN,KAAKO,EAAAA,OAALL,KAAA,CAAYM,EAAAA,oCA+BZV,SAAA,CAAA,CAAAE,KAAGS,EAAAA,aAAHP,KAAA,CAAgB,gBAAiB,CAAC,cC/DlC,IAAAQ,EAAA,2BAIA,CAAAV,KAACW,EAAAA,SAADT,KAAA,CAAU,CACRU,aAAc,CAACrC,GACfsC,QAAS,CAACtC"
}
