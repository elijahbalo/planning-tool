(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define('angular2-multiline-ellipsis', ['exports', '@angular/core', '@angular/common'], factory) :
	(factory((global['angular2-multiline-ellipsis'] = {}),global.ng.core,global.ng.common));
}(this, (function (exports,core,common) { 'use strict';

var MultilineEllipsisDirective = /** @class */ (function () {
    function MultilineEllipsisDirective(el, platformId) {
        this.el = el;
        this.platformId = platformId;
        this.dotChar = 'â€¦';
    }
    MultilineEllipsisDirective.prototype.ngAfterViewInit = function () {
        var isBrowser = common.isPlatformBrowser(this.platformId);
        var el = this.el.nativeElement;
        if (el.getAttribute('dotdotdot')) {
            this.dotChar = el.getAttribute('dotdotdot');
        }
        this.textInit = el.innerText.split(' ');
        if (isBrowser) {
            this.ellipsisFunc();
        }
    };
    MultilineEllipsisDirective.prototype.ellipsisFunc = function () {
        var el = this.el.nativeElement;
        var text = JSON.parse(JSON.stringify(this.textInit));
        el.innerText = "" + text.join(' ');
        while (el.scrollHeight > el.offsetHeight) {
            text = text.slice(0, -1);
            el.innerText = "" + text.join(' ') + this.dotChar;
        }
    };
    MultilineEllipsisDirective.prototype.onResize = function (event) {
        this.ellipsisFunc();
    };
    return MultilineEllipsisDirective;
}());
MultilineEllipsisDirective.decorators = [
    { type: core.Directive, args: [{
                selector: '[appEllipsis]'
            },] },
];
MultilineEllipsisDirective.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] },] },
]; };
MultilineEllipsisDirective.propDecorators = {
    "onResize": [{ type: core.HostListener, args: ['window:resize', ['$event'],] },],
};
var MultilineEllipsisModule = /** @class */ (function () {
    function MultilineEllipsisModule() {
    }
    return MultilineEllipsisModule;
}());
MultilineEllipsisModule.decorators = [
    { type: core.NgModule, args: [{
                declarations: [MultilineEllipsisDirective],
                exports: [MultilineEllipsisDirective]
            },] },
];

exports.MultilineEllipsisModule = MultilineEllipsisModule;
exports.MultilineEllipsisDirective = MultilineEllipsisDirective;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular2-multiline-ellipsis.umd.js.map
