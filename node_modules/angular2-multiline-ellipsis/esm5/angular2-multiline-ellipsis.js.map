{
  "version": 3,
  "file": "angular2-multiline-ellipsis.js",
  "sources": [
    "ng://angular2-multiline-ellipsis/out/src/app/multiline-ellipsis/multiline-ellipsis.module.ts",
    "ng://angular2-multiline-ellipsis/out/src/app/multiline-ellipsis/multiline-ellipsis.directive.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\r\nimport { MultilineEllipsisDirective } from './multiline-ellipsis.directive';\r\n\r\n\r\n@NgModule({\r\n  declarations: [MultilineEllipsisDirective],\r\n  exports: [MultilineEllipsisDirective]\r\n})\r\nexport class MultilineEllipsisModule { }\r\n",
    "import { AfterViewInit, Directive, ElementRef, Inject, PLATFORM_ID, HostListener, Input } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n/**\n * Removes excess text from element until it fits in elements\n * and appends a ellipsis symbol to end of text. This requires that\n * the elements height be fixed and it's `overflow` css property\n * be `hidden`\n *\n * @example\n * ```html\n * <p appEllipsis>Lorem ipsum dolor</p>\n * ```\n *\n */\n\n@Directive({\n  selector: '[appEllipsis]'\n})\nexport class MultilineEllipsisDirective implements AfterViewInit {\n  /**\n   * Ellipsis charater\n   */\n  private dotChar = 'â€¦';\n  /**\n   * init text when load page\n   */\n  private textInit: any;\n  /**\n   * contructor\n   */\n  constructor(\n    private el: ElementRef,\n    @Inject(PLATFORM_ID) private platformId\n  ) { }\n  /**\n   * after view init\n   */\n  ngAfterViewInit(): void {\n    const isBrowser = isPlatformBrowser(this.platformId);\n    const el: HTMLElement = this.el.nativeElement;\n    if (el.getAttribute('dotdotdot')) {\n      this.dotChar = el.getAttribute('dotdotdot');\n    }\n    this.textInit = el.innerText.split(' ');\n    if (isBrowser) {\n      this.ellipsisFunc();\n    }\n  }\n  /**\n   * ellipsis Function\n   */\n  private ellipsisFunc(): void {\n    const el: HTMLElement = this.el.nativeElement;\n    let text = JSON.parse(JSON.stringify(this.textInit));\n    el.innerText = `${text.join(' ')}`;\n    while (el.scrollHeight > el.offsetHeight) {\n      text = text.slice(0, -1);\n      el.innerText = `${text.join(' ')}${this.dotChar}`;\n    }\n  }\n  /**\n   * listen window resize\n   */\n  @HostListener('window:resize', ['$event'])\n  onResize(event: any): void {\n    this.ellipsisFunc();\n  }\n}\n\n"
  ],
  "names": [],
  "mappings": ";;;ACkBA;IAYE,oCACU,EADZ,EAEiC,UAFjC;QACY,IAAZ,CAAA,EAAc,GAAF,EAAE,CAAd;QACiC,IAAjC,CAAA,UAA2C,GAAV,UAAU,CAA3C;QAVA,IAAA,CAAA,OAAA,GAAoB,GAAG,CAAvB;KAWO;IAIL,oDAAe,GAAf;QACE,IAAM,SAAS,GAAG,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACrD,IAAM,EAAE,GAAgB,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC;QAC9C,IAAI,EAAE,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE;YAChC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;SAC7C;QACD,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACxC,IAAI,SAAS,EAAE;YACb,IAAI,CAAC,YAAY,EAAE,CAAC;SACrB;KACF;IAIO,iDAAY,GAAZ;QACN,IAAM,EAAE,GAAgB,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC;QAC9C,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QACrD,EAAE,CAAC,SAAS,GAAG,KAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAG,CAAC;QACnC,OAAO,EAAE,CAAC,YAAY,GAAG,EAAE,CAAC,YAAY,EAAE;YACxC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACzB,EAAE,CAAC,SAAS,GAAG,KAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,OAAS,CAAC;SACnD;;IAMH,6CAAQ,GAAR,UAAS,KAAU;QACjB,IAAI,CAAC,YAAY,EAAE,CAAC;;;;;IAlDxB,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW;gBACT,QAAQ,EAAE,eAAe;aAC1B,EAAD,EAAA;;;IAjBA,EAAA,IAAA,EAAmC,UAAU,GAA7C;IAgCA,EAAA,IAAA,EAAA,SAAA,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAK,MAAM,EAAX,IAAA,EAAA,CAAY,WAAW,EAAvB,EAAA,EAAA,EAAA;;;IA+BA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAG,YAAY,EAAf,IAAA,EAAA,CAAgB,eAAe,EAAE,CAAC,QAAQ,CAAC,EAA3C,EAAA,EAAA;;AD/DA;IAAA;;;;;IAIA,EAAA,IAAA,EAAC,QAAQ,EAAT,IAAA,EAAA,CAAU;gBACR,YAAY,EAAE,CAAC,0BAA0B,CAAC;gBAC1C,OAAO,EAAE,CAAC,0BAA0B,CAAC;aACtC,EAAD,EAAA;;;;;"
}
