{"version":3,"sources":["ng://ngx-ellipsis/lib/directives/ellipsis.directive.ts","ng://ngx-ellipsis/lib/ellipsis.module.ts"],"names":["elementRef","renderer","ngZone","this","EventEmitter","EllipsisDirective","numericBinarySearch","max","callback","mid","low","high","best","prototype","ngAfterViewInit","ellipsisCharacters","moreClickEmitter","observers","length","ellipsisWordBoundaries","replace","elem","nativeElement","ellipsisContent","originalText","innerText","setProperty","innerElem","createElement","addClass","text","createText","appendChild","addResizeListener","ngOnChanges","applyEllipsis","ngOnDestroy","removeAllListeners","destroyMoreClickListener","removeResizeListener","triggerNow","resizeDetectionStrategy","applyOnWindowResize","addElementResizeListener","console","warn","onResize","event","_this","run","scrollStrategy","elementResizeDetector","elementResizeDetectorMaker","strategy","calledAsynchronously","listenTo","getTruncatedText","truncatedText","substr","charAt","match","i","truncateText","addMoreListener","listen","e","target","className","preventDefault","emit","maxLength","curLength","isOverflowing","currentOverflow","style","overflow","clientWidth","scrollWidth","clientHeight","scrollHeight","Directive","args","selector","ElementRef","Renderer2","NgZone","Input","Output","HostListener","EllipsisModule","NgModule","imports","declarations","exports"],"mappings":"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","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  Renderer2,\n  Input,\n  Output,\n  EventEmitter,\n  NgZone,\n  HostListener,\n  OnChanges,\n  AfterViewInit,\n  OnDestroy\n} from '@angular/core';\nimport * as elementResizeDetectorMaker from 'element-resize-detector';\n\n/**\n * Directive to truncate the contained text, if it exceeds the element's boundaries\n * and append characters (configurable, default '...') if so.\n */\n@Directive({\n  selector: '[ellipsis]'\n})\nexport class EllipsisDirective implements OnChanges, OnDestroy, AfterViewInit {\n  /**\n   * Instance of https://github.com/wnr/element-resize-detector\n   */\n  private static elementResizeDetector: elementResizeDetectorMaker.Erd = null;\n\n  /**\n   * The original text (not truncated yet)\n   */\n  private originalText: string;\n\n  /**\n   * The referenced element\n   */\n  private elem: any;\n\n  /**\n   * Inner div element (will be auto-created)\n   */\n  private innerElem: any;\n\n  /**\n   * Whether the ellipsis should be applied on window resize\n   */\n  private applyOnWindowResize = false;\n\n  /**\n   * Remove function for the currently registered click listener\n   * on the link `this.ellipsisCharacters` are wrapped in.\n   */\n  private destroyMoreClickListener: () => void;\n\n  /**\n   * The ellipsis html attribute\n   * If anything is passed, this will be used as a string to append to\n   * the truncated contents.\n   * Else '...' will be appended.\n   */\n  @Input('ellipsis') ellipsisCharacters: string;\n\n  /**\n   * The ellipsis-content html attribute\n   * If passed this is used as content, else contents\n   * are fetched from innerHTML\n   */\n  @Input('ellipsis-content') ellipsisContent: string = null;\n\n  /**\n   * The ellipsis-word-boundaries html attribute\n   * If anything is passed, each character will be interpreted\n   * as a word boundary at which the text may be truncated.\n   * Else the text may be truncated at any character.\n   */\n  @Input('ellipsis-word-boundaries') ellipsisWordBoundaries: string;\n\n  /**\n   * The ellipsis-resize-detection html attribute\n   * Algorithm to use to detect element/window resize - any of the following:\n   * 'element-resize-detector': (default) Use https://github.com/wnr/element-resize-detector with its 'scroll' strategy\n   * 'element-resize-detector-object': Use https://github.com/wnr/element-resize-detector with its 'object' strategy (deprecated)\n   * 'window': Only check if the whole window has been resized/changed orientation by using angular's built-in HostListener\n   */\n  @Input('ellipsis-resize-detection') resizeDetectionStrategy: '' | 'element-resize-detector' | 'element-resize-detector-object' | 'window';\n\n  /**\n   * The ellipsis-click-more html attribute\n   *  If anything is passed, the ellipsisCharacters will be\n   *  wrapped in <a></a> tags and an event handler for the\n   *  passed function will be added to the link\n   */\n  @Output('ellipsis-click-more') moreClickEmitter: EventEmitter<any> = new EventEmitter();\n\n\n  /**\n   * Utility method to quickly find the largest number for\n   * which `callback(number)` still returns true.\n   * @param  max      Highest possible number\n   * @param  callback Should return true as long as the passed number is valid\n   * @return          Largest possible number\n   */\n  private static numericBinarySearch(max: number, callback: (n: number) => boolean): number {\n    let low = 0;\n    let high = max;\n    let best = -1;\n    let mid: number;\n\n    while (low <= high) {\n      // tslint:disable-next-line:no-bitwise\n      mid = ~~((low + high) / 2);\n      const result = callback(mid);\n      if (!result) {\n        high = mid - 1;\n      } else {\n        best = mid;\n        low = mid + 1;\n      }\n    }\n\n    return best;\n  }\n\n  /**\n   * The directive's constructor\n   */\n  public constructor(private elementRef: ElementRef, private renderer: Renderer2, private ngZone: NgZone) { }\n\n  /**\n   * Angular's init view life cycle hook.\n   * Initializes the element for displaying the ellipsis.\n   */\n  ngAfterViewInit() {\n    // let the ellipsis characters default to '...':\n    if (this.ellipsisCharacters === '') {\n      this.ellipsisCharacters = '...';\n    }\n\n    if (this.moreClickEmitter.observers.length > 0) {\n      this.ellipsisCharacters = `<a href=\"#\" class=\"ngx-ellipsis-more\">${this.ellipsisCharacters}</a>`;\n    }\n\n    // perform regex replace on word boundaries:\n    if (!this.ellipsisWordBoundaries) {\n      this.ellipsisWordBoundaries = '';\n    }\n    this.ellipsisWordBoundaries = '[' + this.ellipsisWordBoundaries.replace(/\\\\n/, '\\n').replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&') + ']';\n\n    // store the original contents of the element:\n    this.elem = this.elementRef.nativeElement;\n    if (this.ellipsisContent) {\n      this.originalText = this.ellipsisContent;\n    } else if (!this.originalText) {\n      this.originalText = this.elem.innerText;\n    }\n\n    // add a wrapper div (required for resize events to work properly):\n    this.renderer.setProperty(this.elem, 'innerHTML', '');\n    this.innerElem = this.renderer.createElement('div');\n    this.renderer.addClass(this.innerElem, 'ngx-ellipsis-inner');\n    const text = this.renderer.createText(this.originalText);\n    this.renderer.appendChild(this.innerElem, text);\n    this.renderer.appendChild(this.elem, this.innerElem);\n\n    // start listening for resize events:\n    this.addResizeListener(true);\n  }\n\n  /**\n   * Angular's change life cycle hook.\n   * Change original text (if the ellipsis-content has been passed)\n   * and re-render\n   */\n  ngOnChanges() {\n    if (!this.elem || typeof this.ellipsisContent === 'undefined' || this.originalText === this.ellipsisContent) {\n      return;\n    }\n\n    this.originalText = this.ellipsisContent;\n    this.applyEllipsis();\n  }\n\n  /**\n   * Angular's destroy life cycle hook.\n   * Remove event listeners\n   */\n  ngOnDestroy() {\n    this.removeAllListeners();\n  }\n\n  /**\n   * remove all resize listeners\n   */\n  private removeAllListeners() {\n    if (this.destroyMoreClickListener) {\n      this.destroyMoreClickListener();\n    }\n\n    this.removeResizeListener();\n  }\n\n\n  /**\n   * Set up an event listener to call applyEllipsis() whenever a resize has been registered.\n   * The type of the listener (window/element) depends on the resizeDetectionStrategy.\n   * @param triggerNow=false if true, the ellipsis is applied immediately\n   */\n  private addResizeListener(triggerNow = false) {\n    if (typeof (this.resizeDetectionStrategy) === 'undefined') {\n      this.resizeDetectionStrategy = '';\n    }\n\n    switch (this.resizeDetectionStrategy) {\n      case 'window':\n        this.applyOnWindowResize = true;\n        if (triggerNow) {\n          this.applyEllipsis();\n        }\n        break;\n      case 'element-resize-detector-object':\n        this.addElementResizeListener(false);\n        break;\n      default:\n        if (typeof (console) !== 'undefined') {\n          console.warn(\n            `No such ellipsis-resize-detection strategy: '${this.resizeDetectionStrategy}'. Using 'element-resize-detector' instead`\n          );\n        }\n      // tslint:disable-next-line:no-switch-case-fall-through\n      case 'element-resize-detector':\n      case '':\n        this.addElementResizeListener();\n        break;\n    }\n  }\n\n  @HostListener('window:resize', ['$event']) onResize(event: Event) {\n    this.ngZone.run(() => {\n      if (this.applyOnWindowResize) {\n        this.applyEllipsis();\n      }\n    });\n  }\n\n  /**\n   * Set up an event listener to call applyEllipsis() whenever the element\n   * has been resized.\n   * @param scrollStrategy=true Use the default elementResizeDetector's - strategy - s. https://github.com/wnr/element-resize-detector\n   */\n  private addElementResizeListener(scrollStrategy = true) {\n    if (!EllipsisDirective.elementResizeDetector) {\n      const maker: any = elementResizeDetectorMaker;\n      EllipsisDirective.elementResizeDetector = maker({ strategy: scrollStrategy ? 'scroll' : 'object' });\n    }\n\n\n    let calledAsynchronously = false;\n    EllipsisDirective.elementResizeDetector.listenTo(this.elementRef.nativeElement, () => {\n      if (!calledAsynchronously) {\n        // elementResizeDetector fires the event directly after re-attaching the listener\n        // -> discard that first event:\n        return;\n      }\n      this.applyEllipsis();\n    });\n    calledAsynchronously = true;\n  }\n\n  /**\n   * Stop listening for any resize event.\n   */\n  private removeResizeListener() {\n    if (this.resizeDetectionStrategy !== 'window') {\n      if (EllipsisDirective.elementResizeDetector && this.elem) {\n        EllipsisDirective.elementResizeDetector.removeAllListeners(this.elem);\n      }\n    } else {\n      this.applyOnWindowResize = false;\n    }\n  }\n\n  /**\n   * Get the original text's truncated version. If the text really needed to\n   * be truncated, this.ellipsisCharacters will be appended.\n   * @param max the maximum length the text may have\n   * @return string       the truncated string\n   */\n  private getTruncatedText(max: number): string {\n    if (!this.originalText || this.originalText.length <= max) {\n      return this.originalText;\n    }\n\n    const truncatedText = this.originalText.substr(0, max);\n    if (this.ellipsisWordBoundaries === '[]' || this.originalText.charAt(max).match(this.ellipsisWordBoundaries)) {\n      return truncatedText + this.ellipsisCharacters;\n    }\n\n    let i = max - 1;\n    while (i > 0 && !truncatedText.charAt(i).match(this.ellipsisWordBoundaries)) {\n      i--;\n    }\n    return truncatedText.substr(0, i) + this.ellipsisCharacters;\n  }\n\n  /**\n   * Set the truncated text to be displayed in the inner div\n   * @param max the maximum length the text may have\n   * @param addMoreListener=false listen for click on the ellipsisCharacters if the text has been truncated\n   */\n  private truncateText(max: number, addMoreListener = false) {\n    const text = this.getTruncatedText(max);\n    this.renderer.setProperty(this.innerElem, 'innerHTML', text);\n\n    if (!addMoreListener) {\n      return;\n    }\n\n    // Remove any existing more click listener:\n    if (this.destroyMoreClickListener) {\n      this.destroyMoreClickListener();\n    }\n\n    // If the text has been truncated, add a more click listener:\n    if (text !== this.originalText) {\n      this.destroyMoreClickListener = this.renderer.listen(this.innerElem, 'click', (e: any) => {\n        if (!e.target || e.target.className !== 'ngx-ellipsis-more') {\n          return;\n        }\n        e.preventDefault();\n        this.moreClickEmitter.emit(e);\n      });\n    }\n  }\n\n  /**\n   * Display ellipsis in the inner div if the text would exceed the boundaries\n   */\n  private applyEllipsis() {\n    // Remove the resize listener as changing the contained text would trigger events:\n    this.removeResizeListener();\n\n    // Find the best length by trial and error:\n    const maxLength = EllipsisDirective.numericBinarySearch(this.originalText.length, curLength => {\n      this.truncateText(curLength);\n      return !this.isOverflowing;\n    });\n\n    // Apply the best length:\n    this.truncateText(maxLength, (this.moreClickEmitter.observers.length > 0));\n\n    // Re-attach the resize listener:\n    this.addResizeListener();\n  }\n\n\n  /**\n   * Whether the text is exceeding the element's boundaries or not\n   */\n  private get isOverflowing(): boolean {\n    // Enforce hidden overflow (required to compare client width/height with scroll width/height)\n    const currentOverflow = this.elem.style.overflow;\n    if (!currentOverflow || currentOverflow === 'visible') {\n      this.elem.style.overflow = 'hidden';\n    }\n\n    const isOverflowing = this.elem.clientWidth < this.elem.scrollWidth - 1 || this.elem.clientHeight < this.elem.scrollHeight - 1;\n\n    // Reset overflow to the original configuration:\n    this.elem.style.overflow = currentOverflow;\n\n    return isOverflowing;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { EllipsisDirective } from './directives/ellipsis.directive';\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [EllipsisDirective],\n  exports: [EllipsisDirective]\n})\nexport class EllipsisModule { }\n"]}